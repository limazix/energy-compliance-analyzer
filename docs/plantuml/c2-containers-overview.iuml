
@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

!define GCP_SPRITES_LOCATION https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/GCPC4Integration.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Firebase/Firebase.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Compute/CloudFunctions.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Database/CloudFirestore.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Storage/CloudStorage.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Database/CloudRealtimeDatabase.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/VertexAI/VertexAI.puml
' For App Hosting, consider using a generic compute or CDN icon if a specific App Hosting icon isn't available
' !include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Compute/AppEngine.puml (as a proxy)

' Styling
skinparam defaultFontName Inter
skinparam dpi 150
skinparam roundCorner 10
skinparam shadowing false

skinparam rectangle {
    StereotypeFontSize 0
}
skinparam person {
    BackgroundColor #08427B
    FontColor #FFFFFF
    BorderColor #073B6F
}
skinparam system_ext {
    BackgroundColor #757575
    FontColor #FFFFFF
    BorderColor #616161
}
skinparam container {
    BackgroundColor #E3F2FD 
    FontColor #1E88E5
    BorderColor #90CAF9
}
skinparam database {
    BackgroundColor #FFCCBC ' Light orange for Firestore, RTDB, Storage (Firebase orange family)
    FontColor #BF360C 
    BorderColor #FF8A65
}

title Container Overview: Energy Compliance Analyzer

Person(user, "Usuário Final", "Profissional do setor elétrico.")

System_Ext(google_auth_service, "Google Sign-In", "Serviço de autenticação do Google.", $sprite=$firebase_auth)
System_Ext(gemini_api, "Google AI (Gemini API)", "API de IA Generativa do Google.", $sprite=$vertex_ai)
System_Ext(aneel, "ANEEL", "Fonte das resoluções normativas.")

System_Boundary(eca_system, "Energy Compliance Analyzer") {
    Container(frontend_app, "Frontend Web App", "Next.js, React, ShadCN UI", "Interface com o usuário para uploads, visualização e chat. Hospedado no Firebase App Hosting.")
    Container(server_actions_api, "Backend API", "Next.js Server Actions", "Lida com requisições da UI, orquestra interações com Firebase e Genkit para chat.")
    Container(functions_backend, "Background Processing", "Firebase Functions", "Processa arquivos CSV, executa pipeline de IA (Genkit + Gemini) para análise e geração de relatórios.", $sprite=$firebase_cloud_functions)
    
    ContainerDb(firestore_db, "Main Database", "Firebase Firestore", "Armazena metadados das análises, status, tags, e relatórios estruturados (JSON).", $sprite=$firebase_cloud_firestore)
    ContainerDb(rtdb_chat, "Chat Database", "Firebase Realtime DB", "Armazena o histórico de conversas do chat interativo do relatório.", $sprite=$firebase_realtime_database)
    ContainerDb(storage_files, "File Storage", "Firebase Storage", "Armazena os arquivos CSV enviados pelos usuários e os relatórios MDX gerados.", $sprite=$firebase_cloud_storage)
}

' Relationships User -> System
Rel(user, frontend_app, "Acessa e usa", "HTTPS")
Rel(user, google_auth_service, "Autentica via")

' Relationships Frontend App -> Other Containers / External Systems
Rel(frontend_app, server_actions_api, "Envia requisições para", "HTTPS (Server Actions)")
Rel(frontend_app, google_auth_service, "Usa para login/logout", "Firebase SDK")
Rel(frontend_app, rtdb_chat, "Lê/Escreve mensagens de chat", "Firebase SDK")
Rel(frontend_app, storage_files, "Faz upload de CSV para", "Firebase SDK") ' Direct upload to Storage

' Relationships Server Actions API -> Other Containers / External Systems
Rel(server_actions_api, firestore_db, "Gerencia registros de análise e relatórios em", "Firebase Admin SDK")
Rel(server_actions_api, storage_files, "Obtém metadados/URLs de arquivos de", "Firebase Admin SDK") ' e.g. to serve MDX
Rel(server_actions_api, rtdb_chat, "Grava mensagens (usuário/IA) no", "Firebase Admin SDK")
Rel(server_actions_api, gemini_api, "Chama para processamento de chat (via Genkit)", "HTTPS")
' Server Actions don't directly call Functions, but update Firestore which triggers them.
Rel(server_actions_api, firestore_db, "Atualiza status para disparar Functions", "Firebase Admin SDK")

' Relationships Functions Backend -> Other Containers / External Systems
Rel(functions_backend, storage_files, "Lê CSVs e grava relatórios MDX em", "Firebase Admin SDK")
Rel(functions_backend, firestore_db, "Lê/Escreve metadados, status, progresso, resultados em", "Firebase Admin SDK")
Rel(functions_backend, gemini_api, "Usa para pipeline de análise e geração de relatório (via Genkit)", "HTTPS")
Rel_Back(functions_backend, firestore_db, "É disparado por atualizações em") ' Firestore trigger

' Implied relationship to ANEEL for all processing components
Rel(server_actions_api, aneel, "Considera (implícito) normas de")
Rel(functions_backend, aneel, "Baseia análise de conformidade em")

@enduml
