@startuml Dynamic_Report_Chat
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!include <GCP/GCPCommon>
!include <GCP/Databases/FirebaseRealtimeDatabase>
!include <GCP/Databases/CloudFirestore>
!include <GCP/Storage/CloudStorage>
!include <GCP/AI/VertexAI>

title "Report Chat Interaction Flow"

actor User as user
participant "Frontend Web App" as frontendApp <<Container>>
participant "Backend API (SA)" as serverActions <<Container>>
participant "`orchestrateReportInteractionFlow`" as orchestrationFlow <<Component>>
participant "`callRevisorTool`" as revisorTool <<Component>>
participant "`reviewComplianceReportFlow`" as reviewFlow <<Component>>
database "Firebase RTDB" as rtdb <<ContainerDb, $sprite="gcp_firebase_realtime_database">>
database "Firebase Firestore" as firestore <<ContainerDb, $sprite="gcp_cloud_firestore">>
participant "Firebase Storage" as storage <<Container, $sprite="gcp_cloud_storage">>
participant "Google AI (Gemini)" as googleAI <<System_Ext, $sprite="gcp_vertex_ai">>

autonumber "<b>[0]"

user -> frontendApp: Sends chat message (text, report context)
frontendApp -> serverActions: Calls `askReportOrchestratorAction` SA
serverActions -> rtdb: Saves user message & AI placeholder to RTDB
serverActions -> orchestrationFlow: Invokes flow with user message & report data

orchestrationFlow -> googleAI: LLM processes user query
alt Optional: Report Revision Requested
  orchestrationFlow -> revisorTool: Calls `callRevisorTool` if revision needed
  revisorTool -> reviewFlow: Invokes `reviewComplianceReportFlow`
  reviewFlow -> googleAI: LLM reviews structured report
  reviewFlow --> revisorTool: Returns revised structured report
  revisorTool --> orchestrationFlow: Returns revised report to main flow
end
orchestrationFlow --> serverActions: Returns AI response (and optionally, revised report) to SA

serverActions -> rtdb: Updates/Streams final AI response in RTDB
alt Optional: Report was Modified
  serverActions -> firestore: Updates structured report in Firestore
  serverActions -> storage: Saves new MDX to Storage
end
frontendApp <-- rtdb: Listens to RTDB for new/updated messages
alt Optional: Report content updated
  frontendApp <-- firestore: Listens for report document updates (MDX/Structured) to re-render report
end

@enduml