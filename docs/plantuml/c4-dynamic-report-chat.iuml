@startuml
!define GCPPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist
!include GCPPuml/GCPGeneral.puml
' For specific service icons, include their .puml files, e.g.:
' !include GCPPuml/Firebase/Firebase.puml
' !include GCPPuml/Database/CloudFirestore.puml
' !include GCPPuml/Storage/CloudStorage.puml

title Dynamic Diagram: Report Chat Interaction

actor User
participant "Frontend Web App (ReportPage)" as Frontend
participant "Server Actions API (reportChatActions)" as ServerActions
database "Firebase RTDB (Chat History)" as RTDB
participant "Genkit Orchestrator Flow (Gemini)" as OrchestratorFlow
participant "Genkit Revisor Tool (Gemini)" as RevisorTool
database "Firebase Firestore (Analysis Doc)" as Firestore
database "Firebase Storage (MDX Reports)" as Storage

User -> Frontend : 1. Types and sends chat message
Frontend -> ServerActions : 2. Calls askReportOrchestratorAction
ServerActions -> RTDB : 3. Saves user message, creates AI placeholder
ServerActions -> OrchestratorFlow : 4. Invokes with context (MDX, JSON report, user query)
OrchestratorFlow -> OrchestratorFlow : 5. Processes query, decides if revision is needed
alt User requests report modification
    OrchestratorFlow -> RevisorTool : 6. Invokes callRevisorTool with structured report
    RevisorTool -> RevisorTool : 7. Uses Gemini to refine structured report
    RevisorTool --> OrchestratorFlow : 8. Returns revised structured report
    OrchestratorFlow -> ServerActions : 9. Returns AI text response AND revised structured report
    ServerActions -> Firestore : 10. Updates structuredReport in analysis document
    ServerActions -> Storage : 11. Generates new MDX, saves to Storage
    ServerActions -> RTDB : 12. Streams/Updates AI textual response
else User asks for clarification
    OrchestratorFlow -> ServerActions : 9. Returns AI textual response
    ServerActions -> RTDB : 10. Streams/Updates AI textual response
end

Frontend -> RTDB : (Listening) 13. Receives user & AI messages in real-time
User <- Frontend : 14. Sees updated chat conversation
alt Report was modified
    Frontend -> Firestore : (Listening) 15. Detects change in Firestore (structuredReport/mdxPath)
    Frontend -> Storage : 16. Re-fetches new MDX report content (via Server Action)
    User <- Frontend : 17. Sees updated report content
end
@enduml
