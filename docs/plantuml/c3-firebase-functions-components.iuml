@startuml C3 - Firebase Functions Components - Energy Compliance Analyzer
' Remote includes with full URLs
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/GCPC4Integration.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Firebase/Firebase.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Compute/CloudFunctions.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/AI_and_Machine_Learning/VertexAI.puml

!include <C4/C4_Component>

title Component Diagram for Background Processing (Firebase Functions)

package "Firebase Function (processAnalysisOnUpdate)" <<CloudFunction>> {
    Component(trigger, "Firestore Trigger", "Firebase Functions SDK", "Listens for Firestore document updates (e.g., status='summarizing_data').")
    Component(processAnalysisFn, "Pipeline Orchestrator", "Node.js/TypeScript", "Main logic controlling the sequence of AI agents and utilities.")

    package "AI Agents (Genkit Flows)" <<Folder>> {
        ComponentGCP(dataSummarizerAgent, "Data Analyst (Summarizer)", "Genkit, Gemini", "Summarizes CSV data chunks.", $sprite="gcp/AI_and_Machine_Learning/VertexAI")
        ComponentGCP(regulationIdentifierAgent, "Regulation Identifier", "Genkit, Gemini", "Identifies relevant ANEEL resolutions.", $sprite="gcp/AI_and_Machine_Learning/VertexAI")
        ComponentGCP(complianceAnalyzerAgent, "Compliance Engineer (Reporter)", "Genkit, Gemini", "Generates initial structured compliance report (JSON).", $sprite="gcp/AI_and_Machine_Learning/VertexAI")
        ComponentGCP(reportReviewerAgent, "Report Reviewer", "Genkit, Gemini", "Refines and corrects the structured report.", $sprite="gcp/AI_and_Machine_Learning/VertexAI")
    }

    package "Utility Modules" <<Folder>> {
        Component(gcsUtil, "Storage Access Utility", "Firebase Admin SDK", "Reads CSV content from Firebase Storage.")
        Component(mdxConverterUtil, "MDX Conversion Utility", "TypeScript", "Converts structured JSON report to MDX.")
        Component(statusUpdaterUtil, "Status/Progress Updater", "Firebase Admin SDK", "Updates analysis status and progress in Firestore.")
    }
}

' External Services
ComponentDbGCP(firestore, "Firebase Firestore", "NoSQL Database", "Source of trigger, stores results.", $sprite="gcp/Firebase/Firestore")
ComponentDbGCP(storage, "Firebase Storage", "Object Storage", "Stores CSVs and MDX reports.", $sprite="gcp/Firebase/CloudStorage")
ComponentGCP(googleAI, "Google AI (Gemini)", "LLM Service", "Used by Genkit agents.", $sprite="gcp/AI_and_Machine_Learning/VertexAI")


' Relationships
trigger -> processAnalysisFn : "Invokes with event data"
processAnalysisFn -> gcsUtil : "Uses to read CSV"
processAnalysisFn -> dataSummarizerAgent : "Calls"
processAnalysisFn -> regulationIdentifierAgent : "Calls"
processAnalysisFn -> complianceAnalyzerAgent : "Calls"
processAnalysisFn -> reportReviewerAgent : "Calls"
processAnalysisFn -> mdxConverterUtil : "Uses to generate MDX"
processAnalysisFn -> statusUpdaterUtil : "Uses to update Firestore"
processAnalysisFn -> storage : "Writes MDX file"

dataSummarizerAgent -> googleAI : "Uses (via Genkit)"
regulationIdentifierAgent -> googleAI : "Uses (via Genkit)"
complianceAnalyzerAgent -> googleAI : "Uses (via Genkit)"
reportReviewerAgent -> googleAI : "Uses (via Genkit)"

statusUpdaterUtil -> firestore : "Writes updates"
gcsUtil -> storage : "Reads file"

' Firestore is the source of the trigger
firestore ..> trigger : "Triggers (onUpdate)"

@enduml
