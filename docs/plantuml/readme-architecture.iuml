@startuml readme_architecture
' Diagram Type: High-Level System Architecture (C4-Inspired)

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' Styling
!define PRIMARY_COLOR #3F51B5
!define ACCENT_COLOR #FF9800
!define LIGHT_ACCENT_BG #FFF3E0 
!define LIGHT_GRAY_BG #F0F2F5
!define DARK_TEXT_COLOR #333333
!define LIGHT_BLUE_BG #EBF4FF 
!define MUTED_BLUE_GRAY_BORDER #B0BEC5
!define DARK_BLUE_TEXT #1A237E 
!define WHITE_BG #FFFFFF

skinparam {
    DefaultFontName Inter
    DefaultFontSize 11
    RoundCorner 15
    Shadowing false
    ArrowColor #555555
    ArrowThickness 1.2
    Padding 5
    ActorStyle awesome
}

skinparam person {
    BackgroundColor LIGHT_BLUE_BG
    BorderColor PRIMARY_COLOR
    FontColor DARK_TEXT_COLOR
    StereotypeFontColor DARK_BLUE_TEXT
    LineThickness 1.5
}

skinparam system_ext { ' Styling for System_Ext
    BackgroundColor LIGHT_GRAY_BG
    BorderColor MUTED_BLUE_GRAY_BORDER
    FontColor DARK_TEXT_COLOR
    StereotypeFontColor DARK_BLUE_TEXT
    LineThickness 1.5
}

skinparam boundary {
    BorderColor PRIMARY_COLOR
    BackgroundColor #E8EAF6 // Lighter primary blue for boundary background
    FontColor DARK_BLUE_TEXT
    StereotypeFontColor DARK_BLUE_TEXT
    LineThickness 2
    FontSize 12
}

skinparam container {
    BorderColor PRIMARY_COLOR
    BackgroundColor WHITE_BG
    FontColor DARK_TEXT_COLOR
    StereotypeFontColor PRIMARY_COLOR
    LineThickness 1.5
}
skinparam database extends container {
    StereotypeFontColor PRIMARY_COLOR
}

' Custom stereotype for AI related components
skinparam rectangle<<AI_Related>> {
    BorderColor ACCENT_COLOR
    BackgroundColor LIGHT_ACCENT_BG
    FontColor #BF360C 
    StereotypeFontColor #BF360C
}
skinparam agent<<AI_Related>> { ' For System_Ext that are AI
    BorderColor ACCENT_COLOR
    BackgroundColor LIGHT_ACCENT_BG
    FontColor #BF360C 
    StereotypeFontColor #BF360C
}


LAYOUT_WITH_LEGEND()
top to bottom direction

' Elements
Person(user, "End User", "Uploads data, views reports, interacts via chat.")
System_Ext(aneel, "ANEEL", "Brazilian National Electrical Energy Agency. Provides Normative Resolutions (conceptual input).")

Boundary(b_app_hosting, "Firebase App Hosting", "Hosts the Next.js application (Frontend & API)") {
    Container(frontend, "Frontend Web App", "Next.js, React, ShadCN, Tailwind", "UI for data upload, analysis visualization, and real-time report chat.")
    Container(server_actions, "Next.js Server Actions", "Node.js, Genkit", "Backend API for frontend. Triggers background processing. Orchestrates report chat AI.") <<AI_Related>>
}

Boundary(b_firebase_services, "Firebase Backend Services", "Cloud-hosted backend services") {
    Container(auth, "Firebase Authentication", "OAuth (Google Sign-In)", "Manages user authentication and session persistence.")
    ContainerDb(firestore, "Firebase Firestore", "NoSQL Document DB", "Stores analysis metadata, user session data, tags, and structured (JSON) compliance reports.")
    ContainerDb(storage, "Firebase Storage", "Object Storage", "Stores uploaded CSV files and generated compliance reports (MDX/PDF).")
    ContainerDb(rtdb, "Firebase Realtime DB", "NoSQL JSON DB", "Manages real-time chat history for interactive reports.")
    Container(functions, "Firebase Functions", "Node.js, Genkit", "Handles background processing: CSV data analysis, AI agent pipeline execution, and report generation (MDX/PDF).") <<AI_Related>>
}

System_Ext(gemini, "Google AI (Gemini)", "Generative AI Model. Powers AI agents for data analysis, regulation identification, report generation, and chat responses.") <<AI_Related>>


' Relationships
user --> frontend: "Interacts with (Uploads CSV, Views Reports, Chats)"

frontend --> server_actions: "Invokes API calls (HTTP/S)"

server_actions --> auth: "Verifies user session"
server_actions --> firestore: "Reads/Writes analysis records, user data"
server_actions --> storage: "Manages file URLs (CSV, Reports)"
server_actions --> rtdb: "Manages chat messages (read/write)"
server_actions --> gemini: "For report chat AI (via Genkit)"
server_actions --> functions: "Triggers processing (via Firestore status update)"

functions --> storage: "Reads CSV data, Writes generated reports (MDX/PDF)"
functions --> firestore: "Reads analysis task, Writes results & status"
functions --> gemini: "For analysis pipeline (via Genkit)"
functions .> aneel: "Uses ANEEL regulations (conceptual)"

gemini .> aneel: "Leverages knowledge of ANEEL regulations (conceptual)"

@enduml