@startuml readme_architecture

!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/GCPC4Integration.puml

' Styling for a professional look and feel, incorporating PRD colors
skinparam defaultTextAlignment center
skinparam roundcorner 15
skinparam shadowing false
skinparam handwritten false
skinparam backgroundColor #F0F2F5 ' Light gray background

skinparam rectangle<<boundary>> {
    borderColor #3F51B5 ' Deep blue
    borderThickness 2
    backgroundColor #FFFFFF
    fontColor #333333
    stereotypeFontColor #555555
}
skinparam person {
    borderColor #3F51B5 ' Deep blue
    backgroundColor #FFFFFF
    fontColor #333333
    stereotypeFontColor #555555
}
skinparam system {
    borderColor #3F51B5 ' Deep blue
    backgroundColor #E3F2FD ' Lighter blue for systems
    fontColor #333333
    stereotypeFontColor #555555
}
skinparam system_ext {
    borderColor #757575
    backgroundColor #EEEEEE
    fontColor #333333
    stereotypeFontColor #555555
}
skinparam container {
    borderColor #FF9800 ' Orange accent
    backgroundColor #FFF3E0 ' Lighter orange
    fontColor #333333
    stereotypeFontColor #555555
}
skinparam database {
    borderColor #FF9800 ' Orange accent
    backgroundColor #FFF3E0 ' Lighter orange
    fontColor #333333
    stereotypeFontColor #555555
}
skinparam arrow {
    color #3F51B5 ' Deep blue
    fontColor #3F51B5
    fontSize 12
}

hide stereotype
title Energy Compliance Analyzer - High-Level Architecture

top to bottom direction

Person(user, "User", "Electrical sector professional, facility manager, or consultant responsible for energy compliance.", $sprite="person")
System_Ext(aneel, "ANEEL", "Brazilian National Electrical Energy Agency - Source of Normative Resolutions (e.g., PRODIST).", $sprite="gov_building")

Boundary(b_app_hosting, "Firebase App Hosting", "Hosts the Next.js application", $sprite="Mobile/Firebase.png") {
    ContainerGCP(frontend, "Frontend Web App", "Next.js, React, ShadCN UI, Tailwind", "Provides UI for data upload, analysis visualization, report viewing, and interactive chat.", $sprite="Generic_Web_Frontend.png")
    ContainerGCP(server_actions, "Next.js Server Actions", "Node.js (Next.js Backend)", "Handles API requests from frontend, manages analysis lifecycle (initiation, status updates), orchestrates chat interactions.", $sprite="Compute/CloudRun.png")
}

Boundary(b_firebase_backend, "Firebase Backend Services", "Core backend infrastructure") {
    ContainerGCP(auth, "Firebase Authentication", "Google Sign-In", "Manages user authentication and session management.", $sprite="Identity_Security/FirebaseAuthentication.png")
    ContainerDbGCP(firestore, "Firebase Firestore", "NoSQL Document DB", "Stores analysis metadata, status, progress, structured reports, user tags.", $sprite="Databases/Firestore.png")
    ContainerGCP(storage, "Firebase Storage", "Object Storage", "Stores uploaded CSV files and generated MDX/PDF reports.", $sprite="Storage/CloudStorage.png")
    ContainerDbGCP(rtdb, "Firebase Realtime Database", "NoSQL JSON DB", "Manages real-time chat history for report interaction.", $sprite="Databases/FirebaseRealtimeDatabase.png")
    ContainerGCP(functions, "Firebase Functions", "Node.js (Serverless)", "Executes background processing: CSV parsing, AI agent pipeline (data summarization, regulation identification, compliance assessment, report review), MDX/PDF generation.", $sprite="Compute/CloudFunctions.png")
}

SystemGCP_Ext(google_ai, "Google AI (Gemini)", "Generative AI Models", "Powers AI agents in Firebase Functions and Next.js Server Actions for data analysis, report generation, and chat.", $sprite="AI_Machine_Learning/VertexAI.png")

' Relationships
user -> frontend : Interacts with
frontend -> server_actions : Makes API calls (upload, get reports, chat)
server_actions -> auth : Verifies user identity
server_actions -> firestore : Manages analysis records & metadata
server_actions -> storage : Gets/Puts report file references (indirectly for uploads)
server_actions -> rtdb : Manages chat history
server_actions -> functions : Triggers analysis processing (via Firestore status update)
server_actions -> google_ai : For chat orchestrator agent

functions -> storage : Reads CSV data, Writes MDX/PDF reports
functions -> firestore : Updates analysis status, progress, results
functions -> google_ai : For AI agent pipeline (Summarizer, Engineer, Reviewer)

functions -> aneel : (Implicitly) Uses knowledge of regulations
google_ai -> aneel : (Implicitly) Uses knowledge of regulations for analysis

aneel ..> functions : Regulations
aneel ..> google_ai : Regulations (for context)

@enduml
