
@startuml High-Level System Architecture (C4-Inspired)
' C4 Standard Library Includes - MUST BE FIRST
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' GCP C4 Integration (includes GCPCommon.puml which defines generic sprites)
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/GCPC4Integration.puml

' Styling
skinparam defaultFontName "Inter"
skinparam defaultMonospacedFontName "Menlo"
skinparam shadowing false
skinparam roundCorner 10
skinparam ArrowColor #555555
skinparam ArrowThickness 1.5

skinparam person {
  BackgroundColor #007bff
  FontColor #ffffff
  BorderColor #0056b3
  StereotypeFontColor #ffffff
  shadowing false
}

skinparam system {
  BackgroundColor #6c757d
  FontColor #ffffff
  BorderColor #494f54
  StereotypeFontColor #ffffff
  shadowing false
}
skinparam system_ext {
  BackgroundColor #6c757d
  FontColor #ffffff
  BorderColor #494f54
  StereotypeFontColor #ffffff
  shadowing false
}

skinparam container {
  BackgroundColor #145602
  FontColor #ffffff
  BorderColor #0F3E02
  StereotypeFontColor #E6E6E6
  shadowing false
}
skinparam containerDb {
  BackgroundColor #1E8403
  FontColor #ffffff
  BorderColor #145602
  StereotypeFontColor #E6E6E6
  shadowing false
  shape MdDb
}

skinparam boundary {
  BorderColor #0F3E02
  BackgroundColor #E6FEE0
  FontColor #0F3E02
  StereotypeFontColor #0F3E02
  shadowing false
}

' Layout Direction
top to bottom direction

' Elements
Person(user, "User", "Interacts with the system to upload data, view reports, and chat.", $sprite="users") ' Using $fa_users from GCPCommon
System_Ext(aneel, "ANEEL", "Brazilian National Electrical Energy Agency. Provides normative resolutions.", $sprite="gov_building") ' Generic icon for external org

Boundary(b_app_hosting, "Firebase App Hosting", "Hosts the Next.js Application") {
  ContainerGCP(frontend, "Frontend Web App", "Next.js/React", "SPA, ShadCN, Tailwind. User Interface for data upload, visualization, and interaction.", $sprite=$generic_web_frontend)
  ContainerGCP(server_actions, "Next.js Server Actions", "Node.js", "Backend API for frontend, triggers background processes, chat orchestration.", $sprite=$generic_compute)
}

Boundary(b_firebase_backend, "Firebase Backend Services") {
  ContainerGCP(auth, "Firebase Authentication", "Firebase", "Manages user authentication via Google Sign-In.", $sprite=$generic_security)
  ContainerDbGCP(firestore, "Firebase Firestore", "NoSQL Document DB", "Stores analysis metadata, status, structured reports, and tags.", $sprite=$generic_database)
  ContainerDbGCP(storage, "Firebase Storage", "Object Storage", "Stores uploaded CSV files and generated MDX reports.", $sprite=$generic_storage)
  ContainerDbGCP(rtdb, "Firebase Realtime DB", "NoSQL JSON DB", "Stores chat history for report interaction.", $sprite=$generic_database)
  ContainerGCP(functions, "Firebase Functions", "Serverless Compute", "Executes AI pipeline for data analysis and report generation.", $sprite=$generic_serverless)
}

SystemGCP_Ext(gemini, "Google AI (Gemini)", "Generative AI Models", "Powers AI agents for data summarization, regulation identification, report generation/review, and chat.", $sprite=$generic_machine_learning)

' Relationships
user --> frontend : "Uploads CSV, Views Reports, Chats"

frontend <--> server_actions : "HTTP/S (Server Actions)"
server_actions <--> auth : "Verifies User Identity"
server_actions <--> firestore : "Manages Analysis Records, Tags"
server_actions <--> storage : "Gets Report MDX Path"
server_actions <--> rtdb : "Manages Chat Messages"
server_actions --> gemini : "Orchestrates Chat AI (Genkit)"

frontend --> auth : "Initiates Google Sign-In"
frontend --> storage : "Uploads CSV (via client SDK)"
frontend --> rtdb : "Listens for Chat Updates"

functions <--> firestore : "Triggered by Status, Updates Records"
functions <--> storage : "Reads CSV, Writes MDX Report"
functions --> gemini : "Executes AI Analysis Pipeline (Genkit)"

server_actions --> functions : "Indirectly, via Firestore status update"

Rel_Right(firestore, aneel, "References Resolutions")
Rel_Right(gemini, aneel, "Uses Knowledge of Resolutions")

@enduml

    