@startuml readme_architecture
' Settings
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' Styling
skinparam defaultFontName "Inter"
skinparam defaultMonospacedFontName "Menlo"
skinparam dpi 150
skinparam shadowing false

skinparam person {
  StereotypeFontColor #FFFFFF
  BackgroundColor #08427B
  BorderColor #073B6F
  FontColor #FFFFFF
  StereotypeFontSize 0
}

skinparam system {
  StereotypeFontColor #FFFFFF
  BackgroundColor #1168BD
  BorderColor #105EAB
  FontColor #FFFFFF
  StereotypeFontSize 0
}

skinparam system_ext {
  StereotypeFontColor #333333
  BackgroundColor #999999
  BorderColor #8A8A8A
  FontColor #333333
  StereotypeFontSize 0
}

skinparam container {
  StereotypeFontColor #FFFFFF
  BackgroundColor #438DD5
  BorderColor #3C7FC0
  FontColor #FFFFFF
  StereotypeFontSize 0
}

skinparam containerDb {
  StereotypeFontColor #FFFFFF
  BackgroundColor #438DD5
  BorderColor #3C7FC0
  FontColor #FFFFFF
  StereotypeFontSize 0
  Shape Db
}

skinparam boundary {
  BorderColor #B3B3B3
  BackgroundColor #FFFFFF
  FontColor #333333
  StereotypeFontColor #333333
  StereotypeFontSize 0
  shadowing false
  LegendBorderColor #FFFFFF
  LegendBackgroundColor #FFFFFF
}

' Diagram Definition
' Title: High-Level System Architecture - Energy Compliance Analyzer (C4-Inspired)
title High-Level System Architecture - Energy Compliance Analyzer

top to bottom direction

Person(user, "User", "Interacts with the system to upload data, view reports, and use chat.")
System_Ext(aneel, "ANEEL", "Brazilian National Electrical Energy Agency. Source of regulations.")

Boundary(b_app_hosting, "Firebase App Hosting", "Hosting Environment") {
    Container(frontend, "Frontend Web App", "Next.js, React, ShadCN, Tailwind", "User Interface for data upload, visualization, and interaction.")
    Container(server_actions, "Next.js Server Actions", "Node.js", "Backend API for frontend, triggers background processes, chat orchestration.")
}

Boundary(b_firebase_services, "Firebase Services", "Backend Platform") {
    Container(auth_service, "Authentication", "Firebase Authentication", "Handles user sign-in and identity management.")
    ContainerDb(firestore_db, "Main Database", "Firebase Firestore (NoSQL)", "Stores analysis metadata, status, structured reports, and user data.")
    ContainerDb(storage_service, "File Storage", "Firebase Storage", "Stores uploaded CSV files and generated MDX reports.")
    ContainerDb(rtdb_chat, "Chat Database", "Firebase Realtime Database", "Stores chat messages for report interaction.")
}

Boundary(b_gcp_backend, "Google Cloud (Backend Processing)") {
    Container(functions_service, "Background Processing", "Firebase Functions (Node.js)", "Executes AI pipeline for data analysis, report generation, and other background tasks.")
    System_Ext(google_ai, "Google AI", "Gemini Models via Genkit", "Provides LLM capabilities for analysis, report generation, and chat.")
}

' Relationships
user --> frontend : "Uses GUI"

frontend -> server_actions : "Makes API calls (HTTPS)"
server_actions -> firestore_db : "Reads/Writes data (Initial record, status updates, structured report)"
server_actions -> storage_service : "Initiates upload process, Gets MDX report path"
server_actions -> rtdb_chat : "Saves/Reads chat messages"
server_actions -> functions_service : "Triggers processing (via Firestore update)"
server_actions -> google_ai : "Calls for chat orchestration"

functions_service -> firestore_db : "Reads analysis details, Writes progress, status, and final reports"
functions_service -> storage_service : "Reads CSV data, Writes MDX reports"
functions_service -> google_ai : "Calls for data summarization, regulation identification, report generation, review"

auth_service <- frontend : "Authenticates User"

aneel -> functions_service : "Provides Regulatory Standards (Implicitly via AI Knowledge)"

Rel(user, frontend, "Uploads CSV, Interacts with Report & Chat")
Rel(frontend, server_actions, "Submits data, Sends chat messages, Fetches report")
Rel(server_actions, auth_service, "Verifies User Token")
Rel(server_actions, firestore_db, "CRUD Analysis Records, Tags")
Rel(server_actions, rtdb_chat, "Stores/Streams Chat Messages")
Rel(server_actions, google_ai, "Orchestrates Report Chat via Genkit")
Rel(server_actions, functions_service, "Updates Firestore to Trigger")

Rel(functions_service, firestore_db, "Updates Status, Progress, Results")
Rel(functions_service, storage_service, "Reads CSV, Writes MDX Report")
Rel(functions_service, google_ai, "Executes AI Agents (Summarizer, Engineer, Reviewer) via Genkit")

Rel(storage_service, frontend, "Serves MDX Report (via Server Action)")


@enduml
