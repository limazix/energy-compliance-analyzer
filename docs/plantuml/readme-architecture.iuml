@startuml readme-architecture
!define GCPPuml https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist
!define GCP_SPRITES_LOCATION https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist

!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/GCPCommon.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/User_Management/FirebaseAuthentication.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Databases/Firestore.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Databases/FirebaseRealtimeDatabase.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Storage/CloudStorage.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Compute/CloudFunctions.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/User_Management/Firebase.puml ' For Firebase App Hosting
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/AI_Machine_Learning/VertexAI.puml ' For Google AI (Gemini)

!include <C4/C4_Container.puml> ' Using Container for better grouping

' Styling
skinparam {
    shadowing false
    ArrowColor #555555
    BorderColor #777777
    ActorBorderColor #3F51B5
    ActorBackgroundColor #E8EAF6  ' Lighter blue for actor

    ContainerBorderColor #3F51B5
    ContainerBackgroundColor #FFFFFF
    ContainerFontName Inter
    ContainerStereotypeFontColor #555555

    System_ExtBorderColor #888888
    System_ExtBackgroundColor #E0E0E0
    System_ExtFontName Inter

    BoundaryBorderColor #3F51B5
    BoundaryBorderThickness 2
    BoundaryFontColor #3F51B5
    BoundaryBackgroundColor #F0F2F5 ' Light gray for boundary background

    note {
        BackgroundColor #FFF9C4 ' Light yellow for notes
        BorderColor #FFB300   ' Orange border for notes
        FontColor #333333
    }
    legend {
      BorderColor #3F51B5
      BackgroundColor #FFFFFF
    }
    DefaultFontName Inter
    DefaultFontSize 12
    RoundCorner 10
    BackgroundColor #F0F2F5 ' Overall diagram background
}
hide stereotype

LAYOUT_TOP_DOWN
' LAYOUT_WITH_LEGEND

title Energy Compliance Analyzer - High-Level Architecture

Actor "Usuário" as User

Boundary(app_hosting_boundary, "Firebase App Hosting", $tags="Frontend & Server Actions") {
  Container(Frontend, "Frontend Web App", "Next.js, React, ShadCN UI", "Interface do usuário para upload, visualização e chat interativo", $sprite=$firebase_icon)
  Container(ServerActions, "Next.js Server Actions", "Node.js, Genkit (Chat Agent)", "API para interações do frontend, gatilho de processos e orquestração do chat com IA")
}

Boundary(firebase_backend_boundary, "Firebase Backend Services", $tags="Data, Processing & Auth") {
  Container(Auth, "Firebase Authentication", "Identity Service", "Autenticação de usuários (Google Sign-In)", $sprite=$firebase_auth)
  ContainerDb(Firestore, "Firebase Firestore", "NoSQL Database", "Armazena metadados, estados, relatórios JSON e tags", $sprite=$firestore)
  ContainerDb(Storage, "Firebase Storage", "Object Storage", "Armazena CSVs enviados e relatórios MDX gerados", $sprite=$cloud_storage)
  ContainerDb(RTDB, "Firebase Realtime DB", "JSON Database", "Armazena histórico de chat do relatório", $sprite=$firebase_realtime_database)
  Container(Functions, "Firebase Functions", "Node.js, Genkit (AI Pipeline)", "Processamento de dados em background, análise AI (agentes especializados) e geração de relatórios", $sprite=$cloud_functions)
}

System_Ext(GoogleAI, "Google AI (Gemini)", "Serviço de IA Generativa para análise e chat", $sprite=$vertex_ai)
System_Ext(ANEEL, "ANEEL", "Fonte de Resoluções Normativas (consultadas pela IA)")

' Relationships
User -> Frontend : "Usa o aplicativo (upload, visualização, chat)"
Frontend <--> ServerActions : "Comunicação API (requisições, respostas)"
User -> Auth : "Login com Google"
Auth -> Frontend : "Confirma identidade"

ServerActions -> Firestore : "CRUD de registros de análise, tags"
ServerActions -> RTDB : "Salva/Lê histórico de chat"
ServerActions -> GoogleAI : "Orquestra agente de chat (Gemini)"
ServerActions -[hidden]down-> Functions ' Logical trigger
note on link of ServerActions to Functions: Sinaliza início de processamento (via Firestore trigger)

Frontend -> Storage : "Faz upload de arquivo CSV"

Firestore -[dashed]-> Functions : "Dispara Functions em atualizações de 'status'"
Functions -> Storage : "Lê CSVs, Salva relatórios MDX"
Functions -> Firestore : "Atualiza status, progresso, Salva relatório JSON"
Functions -> GoogleAI : "Executa pipeline de análise (agentes especializados)"

Functions -> ANEEL : "Baseia análise nas regulações (via IA)"
ServerActions -> ANEEL : "Baseia chat nas regulações (via IA)"


' Vertical positioning hints (less strict, more about flow)
User -[hidden]down-> app_hosting_boundary
app_hosting_boundary -[hidden]down-> firebase_backend_boundary
firebase_backend_boundary -[hidden]down-> GoogleAI
GoogleAI -[hidden]down- ANEEL

' Grouping notes for clarity
note as UserInteractions
  **Interações do Usuário:**
  - Upload de CSV de dados de energia
  - Visualização de análises e relatórios
  - Chat interativo sobre o relatório
  - Autenticação
end note
UserInteractions .. User

note as BackendProcessing
  **Processamento Principal (Backend):**
  - Firebase Functions orquestram pipeline de IA
  - Genkit/Gemini para análise de dados e geração de relatório
  - Armazenamento de dados em Firestore e Storage
end note
BackendProcessing .. Functions

@enduml
