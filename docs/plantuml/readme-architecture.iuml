@startuml High-Level Architecture - Energy Compliance Analyzer
!define GCP_SPRITES_LOCATION https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/GCPC4Integration.puml
' Include specific GCP service icon sets as needed for this diagram
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/User_Management/Firebase.puml ' For general Firebase icon
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/Compute/CloudFunctions.puml
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/AI_Machine_Learning/VertexAI.puml

!include <C4/C4_Container.puml>

skinparam defaultFontName Inter
skinparam defaultMonospacedFontName Menlo
skinparam shadowing false
skinparam RoundCorner 10

skinparam rectangle {
  BorderColor #3F51B5
  BackgroundColor #FFFFFF
  FontColor #333333
}
skinparam person {
  BorderColor #3F51B5
  BackgroundColor #D1E0FF
  FontColor #003366
  StereotypeFontColor #003366
}
skinparam system {
  BorderColor #3F51B5
  BackgroundColor #E8EAF6  /* Lighter blue based on primary */
  FontColor #1A237E    /* Darker blue for text */
  StereotypeFontColor #1A237E
}
skinparam database {
  BorderColor #FF9800  /* Accent orange */
  BackgroundColor #FFF3E0 /* Light orange */
  FontColor #BF360C /* Dark orange */
  StereotypeFontColor #BF360C
}
skinparam boundary {
  BorderColor #B0BEC5  /* Neutral gray for boundaries */
  BackgroundColor #ECEFF1
  FontColor #37474F
}
skinparam arrow {
  Color #3F51B5
  FontColor #3F51B5
}
skinparam note {
  BorderColor #78909C
  BackgroundColor #CFD8DC
  FontColor #263238
}
skinparam card {
  BackgroundColor #F0F2F5 /* Light gray background for the overall diagram */
}
skinparam cloud {
  BackgroundColor #F0F2F5
}


LAYOUT_WITH_LEGEND()

title High-Level Architecture - Energy Compliance Analyzer

Person_Ext(user, "User", "Engineer/Analyst")
System_Boundary(app_boundary, "Energy Compliance Analyzer") {
    Container(frontend, "Frontend (Next.js)", "Web Application, UI/UX, Upload, Report Viewing, Chat", $sprite=$firebase_icon)
    Container(backend_api, "Backend API (Next.js Server Actions)", "Handles frontend requests, triggers background tasks, orchestrates chat AI", $sprite=$firebase_icon)
    Container(background_processing, "Background Processing (Firebase Functions)", "Data analysis, AI agent pipeline, report generation", $sprite=$cloud_functions)
    ContainerDb(database, "Firebase Firestore", "Stores analysis metadata, structured reports, user data", $techn="NoSQL Database")
    ContainerDb(storage, "Firebase Storage", "Stores CSV uploads and MDX reports", $techn="Object Storage")
    ContainerDb(rtdb, "Firebase Realtime DB", "Stores chat history", $techn="NoSQL Database")
}

System_Ext(google_ai, "Google AI (Gemini)", "Provides LLM for analysis and chat", $sprite=$vertex_ai)
System_Ext(firebase_auth_service, "Firebase Authentication", "Manages user identity", $techn="Identity Provider")
System_Ext(aneel, "ANEEL", "Source of Normative Resolutions")


Rel(user, frontend, "Interacts with")
Rel(frontend, backend_api, "Sends requests via Server Actions")
Rel(backend_api, database, "Reads/Writes analysis metadata")
Rel(backend_api, storage, "Manages file info")
Rel(backend_api, rtdb, "Manages chat messages")
Rel(backend_api, background_processing, "Triggers via Firestore")
Rel(backend_api, google_ai, "For report chat orchestration")

Rel(background_processing, database, "Updates status, saves structured report")
Rel(background_processing, storage, "Reads CSV, Saves MDX report")
Rel(background_processing, google_ai, "For AI analysis pipeline")

Rel(frontend, firebase_auth_service, "Authenticates via")
Rel(analyzer, aneel, "Uses regulations from")


@enduml
