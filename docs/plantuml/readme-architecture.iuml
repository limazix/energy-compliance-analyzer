
@startuml Energy Compliance Analyzer - High-Level Architecture
!theme materia
' C4-PlantUML includes for C4 modelling.
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

' GCP C4 Integration - THIS IS THE ONLY GCP-SPECIFIC INCLUDE WE WILL USE
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/GCPC4Integration.puml
' NOTE: GCPC4Integration.puml internally includes GCPCommon.puml,
' which defines $GCP_SPRITES_LOCATION = "." by default if not already defined,
' and provides generic icons like $generic_database, $generic_compute, $generic_security, etc.
' It also includes some FontAwesome icons like $fa_users, $fa_server, $fa_database.

' Styling - Professional Look
skinparam {
    HyperlinkColor #2E7D32
    DefaultFontName Inter
    DefaultFontSize 14
    RoundCorner 10
    Shadowing false

    ArrowColor #555555
    ArrowThickness 1.5

    RectangleBorderColor #B0BEC5
    RectangleBorderThickness 1.5
    RectangleStereotypeFontSize 11

    DatabaseBorderColor #B0BEC5
    DatabaseBorderThickness 1.5
    DatabaseStereotypeFontSize 11

    BoundaryBorderColor #78909C
    BoundaryBorderThickness 2
    BoundaryStereotypeFontSize 12
    BoundaryBackgroundColor #ECEFF1

    Person {
        BackgroundColor #E3F2FD
        BorderColor #90CAF9
        StereotypeFontColor #1E88E5
        FontColor #1E88E5
    }
    System {
        BackgroundColor #FCE4EC
        BorderColor #F48FB1
        StereotypeFontColor #D81B60
        FontColor #D81B60
    }
    System_Ext {
        BackgroundColor #F1F8E9
        BorderColor #AED581
        StereotypeFontColor #689F38
        FontColor #558B2F
    }
    Container {
        BackgroundColor #FFFDE7
        BorderColor #FFF59D
        StereotypeFontColor #FBC02D
        FontColor #F9A825
    }
    ContainerDb {
        BackgroundColor #E8EAF6
        BorderColor #C5CAE9
        StereotypeFontColor #3F51B5
        FontColor #3949AB
    }
    Component {
        BackgroundColor #E0F2F1
        BorderColor #A7FFEB
        StereotypeFontColor #00796B
        FontColor #00695C
    }
}
hide stereotype

' Layout direction
top to bottom direction

' Elements
Person(user, "Energy Sector User", "Professional analyzing power quality data (e.g., Engineer, Technician, Consultant)", $sprite=$fa_users)
System_Ext(aneel, "ANEEL Regulations", "ANEEL Normative Resolutions and PRODIST standards", $sprite="application") ' Using a generic application/doc icon

System_Boundary(b_system, "Energy Compliance Analyzer", "Cloud-Native Web Application") {

    Boundary(b_app_hosting, "Firebase App Hosting", "Hosts the frontend and server-side logic for user interaction.", $sprite=$generic_compute) {
        ContainerGCP(frontend, "Frontend Web App", "Next.js, React, ShadCN, Tailwind", "Provides UI for data upload, analysis visualization, report viewing, and interactive chat.", $sprite="Generic_Web_Frontend.png") ' Assuming GCPC4Integration provides a way to specify raw relative paths if needed, or uses a default
        ContainerGCP(server_actions, "Next.js Server Actions", "Node.js", "Backend API for frontend; handles file upload metadata, triggers background processes, and orchestrates report chat interactions.", $sprite=$generic_api)
    }

    Boundary(b_firebase_platform, "Firebase Platform Services", "Core backend services for data, auth, and functions.", $sprite=$google_cloud_logo) {
        ContainerGCP(auth, "Firebase Authentication", "Handles user sign-in and identity management.", $sprite=$generic_security)
        ContainerDbGCP(firestore, "Firebase Firestore", "NoSQL Database", "Stores analysis metadata, status, tags, structured reports, and user data.", $sprite=$generic_database)
        ContainerDbGCP(storage, "Firebase Storage", "Object Storage", "Stores uploaded CSV files and generated MDX report files.", $sprite=$generic_storage)
        ContainerDbGCP(rtdb, "Firebase Realtime Database", "NoSQL Database", "Stores chat messages for real-time interaction with reports.", $sprite=$generic_database)
        ContainerGCP(functions, "Firebase Functions", "Serverless Compute", "Executes background processing pipeline for data analysis and AI report generation.", $sprite=$generic_serverless)
    }
}

SystemGCP_Ext(google_ai, "Google AI (Gemini)", "Generative AI Models", "Provides LLM capabilities for data summarization, regulation identification, report generation/review, and chat responses.", $sprite=$generic_machine_learning)

' Relationships
user -> frontend : "Uploads CSV Data, Views Reports, Interacts via Chat"

frontend -> server_actions : "Submits Upload Form, Fetches Report Data, Sends Chat Messages"
server_actions -> auth : "Validates User Identity"
server_actions -> firestore : "Manages Analysis Records (Create, Update, List, Delete)"
server_actions -> storage : "Gets MDX Report URLs (for frontend)"
server_actions -> rtdb : "Stores/Retrieves Chat Messages"
server_actions -> google_ai : "Invokes Chat Orchestrator Agent (Genkit)"
server_actions -> functions : "Signals for background processing (via Firestore trigger)"

functions -> storage : "Reads CSV Files, Writes MDX Reports"
functions -> firestore : "Updates Analysis Status, Progress, and Results"
functions -> google_ai : "Invokes AI Agents Pipeline (Data Analyst, Engineer, Reporter, Reviewer via Genkit)"

' External System Interactions
functions -> aneel : "Considers Regulations for Analysis (Implicit)"
google_ai -> aneel : "References ANEEL Standards for Report Generation (Implicit)"


Rel_D(frontend, auth, "Initiates Google Sign-In")
Rel_D(user, auth, "Authenticates with Google Credentials")
@enduml

    