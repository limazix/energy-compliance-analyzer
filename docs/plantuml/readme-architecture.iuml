@startuml readme-architecture
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Deployment.puml

' Styling - Professional Look
skinparam defaultFontName "Inter"
skinparam defaultMonospacedFontName "Menlo"
skinparam defaultTextAlignment center
skinparam RoundCorner 10
skinparam ArrowThickness 1.5
skinparam Shadowing false
skinparam handwritten false

skinparam rectangle {
  BackgroundColor #FFFFFF
  BorderColor #3F51B5 
  BorderThickness 2
  FontColor #333333
}
skinparam person {
  BackgroundColor #D1E0FF  
  BorderColor #3F51B5
  FontColor #3F51B5
  StereotypeFontColor #3F51B5
}
skinparam system {
  BackgroundColor #E8EAF6 
  BorderColor #3F51B5
  FontColor #222222
}
skinparam system_ext {
  BackgroundColor #BDBDBD 
  BorderColor #616161
  FontColor #212121
}
skinparam container {
  BackgroundColor #C5CAE9 
  BorderColor #303F9F 
  FontColor #1A237E 
}
skinparam containerDb {
  BackgroundColor #C5CAE9 
  BorderColor #303F9F 
  FontColor #1A237E 
  shape Cylinder ' Using Cylinder shape for databases
}
skinparam component {
  BackgroundColor #E1F5FE 
  BorderColor #0288D1
  FontColor #01579B
}
skinparam boundary {
  BorderColor #757575
  BorderThickness 1
  BackgroundColor #F0F2F5 
  fontColor #424242
  stereotypeFontColor #616161
}
skinparam note {
  BackgroundColor #FFF9C4
  BorderColor #FBC02D
  FontColor #795548
}
skinparam arrow {
  Color #424242
  FontColor #424242
  FontSize 12
}

' Diagram Background
skinparam backgroundcolor #F0F2F5

LAYOUT_TOP_DOWN
LAYOUT_WITH_LEGEND()

title High-Level Architecture: Energy Compliance Analyzer

Person(user, "User", "Interacts with the system to upload data, view reports, and get compliance insights.")
System_Ext(aneel, "ANEEL", "Brazilian National Electrical Energy Agency (Source of Regulations)")

Boundary(b_app_hosting, "Firebase App Hosting", "Hosting for Next.js Application") {
  Container(frontend, "Frontend Web App", "Next.js, React, ShadCN, Tailwind", "User interface for data upload, visualization, and interaction with reports.")
  Container(server_actions, "Next.js Server Actions", "Node.js", "Backend API for frontend, triggers background processes, orchestrates report chat.")
}

System_Boundary(b_firebase_services, "Firebase Services (GCP)") {
  Container(auth_service, "Firebase Authentication", "Handles user sign-in and identity management.")
  ContainerDb(firestore_db, "Firebase Firestore", "Stores analysis metadata, status, structured reports, user data.", "NoSQL Document DB")
  ContainerDb(storage_service, "Firebase Storage", "Stores uploaded CSV files and generated MDX reports.", "Object Storage")
  ContainerDb(rtdb_service, "Firebase Realtime DB", "Manages real-time chat history for reports.", "NoSQL JSON DB")
  Container(functions_service, "Firebase Functions", "Node.js, TypeScript", "Executes background processing for data analysis and AI pipeline (Genkit + Gemini).", "Serverless Compute")
}

System_Ext(google_ai, "Google AI (Gemini)", "Provides generative AI models for analysis, report generation, and chat responses via Genkit.")


' Relationships
user -> frontend : "Uploads CSV, Views Reports, Interacts via Chat"
frontend -> server_actions : "API Calls (Upload init, Fetch reports, Chat messages)"

server_actions -> auth_service : "Verifies User Identity"
server_actions -> firestore_db : "CRUD Analysis Metadata, Structured Reports, Tags"
server_actions -> storage_service : "Manages MDX Report Storage"
server_actions -> rtdb_service : "Saves/Retrieves Chat History"
server_actions -> functions_service : "Triggers Analysis (indirectly via Firestore)"
server_actions -> google_ai : "Orchestrates Report Chat (Genkit)"

functions_service -> storage_service : "Reads CSVs, Writes MDX Reports"
functions_service -> firestore_db : "Updates Analysis Status, Saves Results"
functions_service -> google_ai : "Executes AI Pipeline (Genkit)"

frontend <- rtdb_service : "Real-time Chat Updates"
frontend <- firestore_db : "Real-time Analysis Status (onSnapshot)"
frontend -> auth_service : "Handles User Login/Logout"

aneel -> functions_service : "Influences Compliance Logic (Regulations)"
aneel -> server_actions : "Influences Report Content (Regulations)"

SHOW_LEGEND()
@enduml
