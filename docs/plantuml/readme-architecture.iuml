
@startuml Energy Compliance Analyzer - High-Level Architecture
' Diagram Type: High-Level System Architecture (C4-Inspired)

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
' For GCP styled C4 elements, if needed and if generic icons are used.
!include https://raw.githubusercontent.com/Crashedmind/PlantUML-icons-GCP/master/dist/GCPC4Integration.puml

' Styling
skinparam {
    Shadowing false
    BackgroundColor #FFFFFF
    ArrowColor #26684D // Darker Logo Green from theme
    BorderColor #4C9A70 // Lighter Logo Green from theme
    ActorBorderColor #26684D
    ActorBackgroundColor #F0FFF7 // Very light green

    FontName Inter, Arial, sans-serif
    DefaultTextAlignment center

    skinparam sequenceArrowThickness 2
    skinparam roundcorner 10
    skinparam maxmessagesize 120
    skinparam sequenceParticipant 요소 {
        BackgroundColor #E6F5EC // Light green-gray
        BorderColor #4C9A70
        FontColor #1A4331 // Dark desaturated green
    }

    Cloud {
        FontColor #1A4331
        BorderColor #4C9A70
        BackgroundColor #E6F5EC
    }
    Database {
        FontColor #1A4331
        BorderColor #4C9A70
        BackgroundColor #E6F5EC
    }
    Queue {
        FontColor #1A4331
        BorderColor #4C9A70
        BackgroundColor #E6F5EC
    }

    Boundary {
        BorderColor #26684D
        BackgroundColor #FAFFFDEA // Slightly off-white, almost transparent overlay
        FontColor #1A4331
        StereotypeFontColor #1A4331
    }
    Container {
        BorderColor #4C9A70
        BackgroundColor #FFFFFF
        FontColor #1A4331
        StereotypeFontColor #1A4331
    }
    ContainerDb {
        BorderColor #4C9A70
        BackgroundColor #FFFFFF
        FontColor #1A4331
        StereotypeFontColor #1A4331
        shape CyliDatabase
    }
    System {
        BorderColor #26684D
        BackgroundColor #E6F5EC
        FontColor #1A4331
        StereotypeFontColor #1A4331
    }
    System_Ext {
        BorderColor #6B7280 // Gray
        BackgroundColor #F3F4F6 // Light Gray
        FontColor #111827 // Dark Gray
        StereotypeFontColor #111827
    }
    Person {
        BorderColor #26684D
        BackgroundColor #D1FAE5 // Light primary green for person
        FontColor #065F46 // Darker primary green
        StereotypeFontColor #065F46
    }
}
' Generic GCP Icons - using variables defined in GCPCommon.puml (included by GCPC4Integration.puml)
' Examples: $generic_compute, $generic_database, $generic_storage, $generic_machine_learning, $generic_security, $generic_api
' FontAwesome icons also available like $fa_users, $fa_server, $fa_database

LAYOUT_WITH_LEGEND()
top to bottom direction

' Elements
Person(user, "Energy Sector User", "Electrical engineer, consultant, or utility personnel.", $sprite=$fa_users)
System_Ext(aneel, "ANEEL Regulations", "Brazilian National Electrical Energy Agency's normative resolutions (e.g., PRODIST).", $sprite="gov_building") ' Using a generic sprite name, assuming it's custom or not from GCP icons directly

Boundary(b_gcp, "Google Cloud Platform (Firebase)", $sprite=$gcp_platform) {
    System_Boundary(b_app_hosting, "Firebase App Hosting", $sprite=$firebase) {
        Container(frontend, "Frontend Web App", "Next.js, React, ShadCN UI, Tailwind CSS", "Provides UI for data upload, analysis visualization, report viewing, and interactive chat.", $sprite=$generic_web_frontend)
        Container(server_actions, "Next.js Server Actions", "Node.js", "Handles API requests from frontend, triggers background processing, orchestrates report chat interactions with AI.", $sprite=$generic_compute)
    }

    System_Boundary(b_firebase_backend, "Firebase Backend Services") {
        ContainerGCP(auth, "Firebase Authentication", "Authentication Service", "Manages user sign-in (Google) and identity.", $sprite=$generic_security)
        ContainerDbGCP(firestore, "Firebase Firestore", "NoSQL Document DB", "Stores analysis metadata, status, user data, and structured report JSON.", $sprite=$generic_database)
        ContainerDbGCP(storage, "Firebase Storage", "Object Storage", "Stores uploaded CSV files and generated MDX reports.", $sprite=$generic_storage)
        ContainerDbGCP(rtdb, "Firebase Realtime DB", "NoSQL JSON DB", "Stores and syncs chat messages for report interaction in real-time.", $sprite=$generic_database)
        ContainerGCP(functions, "Firebase Functions", "Serverless Compute", "Executes background data processing and AI agent pipeline (data summarization, regulation identification, compliance analysis, report review).", $sprite=$generic_serverless)
    }

    SystemGCP_Ext(gemini, "Google AI (Gemini)", "Generative AI Model", "Powers AI agents for data analysis, report generation, and chat interaction.", $sprite=$generic_machine_learning)
}

' Relationships
user -> frontend : "Uploads CSV data, views reports, interacts via chat"
frontend -> server_actions : "Sends form data, user messages, requests report data"

server_actions -> auth : "Verifies user identity"
server_actions -> firestore : "Manages analysis records (CRUD)"
server_actions -> storage : "Requests MDX report content"
server_actions -> rtdb : "Saves chat history, streams AI responses"
server_actions -> gemini : "Invokes Chat Orchestrator Agent (Genkit)"
server_actions -> functions : "Triggers background processing (via Firestore status update)"

functions -> storage : "Reads CSV data, writes MDX reports"
functions -> firestore : "Updates analysis status, progress, and results"
functions -> gemini : "Invokes AI Agent Pipeline (Genkit - Data Analyst, Engineer, Reporter, Reviewer)"

aneel -> functions : "Provides regulatory context (implicitly via AI knowledge)"
aneel -> server_actions : "Provides regulatory context (implicitly via AI knowledge for chat)"

@enduml

    