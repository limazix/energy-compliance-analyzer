
@startuml readme_architecture
' Diagram Type: High-Level System Architecture (C4-Inspired)

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

!define DEVICONS https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/devicons
!define FONTAWESOME https://raw.githubusercontent.com/tupadr3/plantuml-icon-font-sprites/master/font-awesome-5

!define PRIMARY_COLOR #3F51B5
!define ACCENT_COLOR #FF9800
!define LIGHT_ACCENT_BG #FFF3E0
!define LIGHT_GRAY_BG #F0F2F5
!define DARK_TEXT_COLOR #333333
!define LIGHT_BLUE_BG #EBF4FF
!define MUTED_BLUE_GRAY_BORDER #B0BEC5
!define DARK_BLUE_TEXT #1A237E
!define WHITE_BG #FFFFFF

skinparam linetype ortho

skinparam {
    DefaultFontName Inter
    DefaultFontSize 11
    RoundCorner 15
    Shadowing false
    ArrowColor #555555
    ArrowThickness 1.2
    Padding 5
    ActorStyle awesome
}

skinparam person {
    BackgroundColor LIGHT_BLUE_BG
    BorderColor PRIMARY_COLOR
    FontColor DARK_TEXT_COLOR
    StereotypeFontColor DARK_BLUE_TEXT
    LineThickness 1.5
    sprite $fa_user
}

skinparam system_ext {
    BackgroundColor LIGHT_GRAY_BG
    BorderColor MUTED_BLUE_GRAY_BORDER
    FontColor DARK_TEXT_COLOR
    StereotypeFontColor DARK_BLUE_TEXT
    LineThickness 1.5
}

skinparam boundary {
    BorderColor PRIMARY_COLOR
    BackgroundColor #E8EAF6
    FontColor DARK_BLUE_TEXT
    StereotypeFontColor DARK_BLUE_TEXT
    LineThickness 2
    FontSize 12
}

skinparam container {
    BorderColor PRIMARY_COLOR
    BackgroundColor WHITE_BG
    FontColor DARK_TEXT_COLOR
    StereotypeFontColor PRIMARY_COLOR
    LineThickness 1.5
}
skinparam database {
    BorderColor PRIMARY_COLOR
    BackgroundColor WHITE_BG
    FontColor DARK_TEXT_COLOR
    StereotypeFontColor PRIMARY_COLOR
    LineThickness 1.5
    sprite $fa_database
}

' Custom stereotype for AI related components
skinparam rectangle<<AI_Related>> {
    BorderColor ACCENT_COLOR
    BackgroundColor LIGHT_ACCENT_BG
    FontColor #BF360C
    StereotypeFontColor #BF360C
}
skinparam agent<<AI_Related>> {
    BorderColor ACCENT_COLOR
    BackgroundColor LIGHT_ACCENT_BG
    FontColor #BF360C
    StereotypeFontColor #BF360C
}


LAYOUT_WITH_LEGEND()
top to bottom direction

' Layer 1: User
Person(user, "End User", "Uploads data, views reports, interacts via chat.", $sprite="$fa_user")

' Layer 2: Client-Side & API Gateway
System_Boundary(app_boundary, "EMA - Electric Magnitudes Analyser", "Google Cloud Hosted Application Environment") {
    Boundary(b_app_hosting, "Client Application & API Layer (Firebase App Hosting)") {
        Container(frontend, "Frontend Web App", "Next.js, React, ShadCN", "UI for data upload, analysis visualization, report chat.", $sprite="$dev_react")
        Container(server_actions, "Next.js Server Actions", "Node.js, Genkit", "API for frontend. Triggers background processing. Orchestrates report chat AI.", $sprite="$dev_nodejs") <<AI_Related>>
    }
    b_app_hosting -[hidden]down-> b_firebase_backend

    ' Layer 3: Backend Services
    Boundary(b_firebase_backend, "Backend Processing & Services (Firebase)") {
        Container(auth, "Firebase Authentication", "OAuth (Google Sign-In)", "Manages user authentication.", $sprite="$dev_firebase")
        Container(fb_functions, "Firebase Functions", "Node.js, Genkit", "Handles CSV analysis, AI agent pipeline, report generation.", $sprite="$dev_nodejs") <<AI_Related>>
    }
    b_firebase_backend -[hidden]down-> b_firebase_storages

    ' Layer 4: Data Storage
    Boundary(b_firebase_storages, "Data Storage Layer (Firebase)") {
        ContainerDb(firestore, "Firebase Firestore", "NoSQL Document DB", "Stores analysis metadata, user sessions, tags, structured reports.", $sprite="$dev_firebase")
        ContainerDb(storage, "Firebase Storage", "Object Storage", "Stores uploaded CSVs, generated MDX/PDF reports.", $sprite="$dev_firebase")
        ContainerDb(rtdb, "Firebase Realtime DB", "NoSQL JSON DB", "Manages real-time chat history for interactive reports.", $sprite="$dev_firebase")
    }
}
app_boundary -[hidden]down-> gemini_system
app_boundary -[hidden]down-> aneel_system


' Layer 5: External Systems
System_Ext(gemini, "Google AI (Gemini)", "Generative AI Model. Powers AI agents.", $sprite="$fa_brain") <<AI_Related>>
System_Ext(aneel, "ANEEL Regulations", "Brazilian National Electrical Energy Agency. Provides Normative Resolutions (conceptual data source).")

' Relationships
user --> frontend: "Interacts with"

frontend -right-> server_actions: "Invokes API calls (HTTPS)"

server_actions --> auth: "Authenticates User / Verifies Session"
Rel_Down(server_actions, firestore, "Writes analysis metadata & status (to trigger Functions)")
Rel_Down(server_actions, rtdb, "Manages chat messages")
Rel_Down(server_actions, gemini, "For report chat AI (via Genkit)")

firestore -[hidden]right-> fb_functions ' Layout hint
Rel(firestore, fb_functions, "Events trigger", "Firestore Triggers")

Rel_Right(fb_functions, auth, "Verifies user (if needed for other services)", "OAuth Token")
Rel_Right(fb_functions, firestore, "Reads analysis task, Writes results & status")
Rel_Right(fb_functions, storage, "Reads CSVs, Writes MDX/PDF reports")
Rel_Right(fb_functions, gemini, "For analysis pipeline (via Genkit)")

fb_functions ..> aneel: "Uses regulations (conceptual)"
gemini ..> aneel: "Leverages knowledge (conceptual)"
@enduml

    