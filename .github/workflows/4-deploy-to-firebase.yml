
name: 4. Deploy to Firebase

on:
  workflow_run:
    workflows: ["3. Build for Deployment"] # Aciona quando o workflow "3. Build for Deployment" completar
    types:
      - completed

jobs:
  deploy_application:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' # Só executa se o build de deploy teve sucesso
    permissions:
      contents: read # Para download de artefatos
      id-token: write # Para autenticação com GCP via WIF

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Download Next.js build artifact
        uses: actions/download-artifact@v4
        with:
          name: nextjs-prod-build
          path: . # Extrai para a raiz do workspace

      - name: Download Functions build artifact
        uses: actions/download-artifact@v4
        with:
          name: functions-prod-build
          path: functions # Extrai para a pasta 'functions'

      - name: Authenticate to Google Cloud (Workload Identity Federation)
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: 'projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/${{ secrets.GCP_WORKLOAD_IDENTITY_POOL_ID }}/providers/${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER_ID }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}'

      - name: Deploy to Firebase App Hosting
        run: |
          # IMPORTANTE: Substitua YOUR_APP_HOSTING_BACKEND_ID pelo ID real do seu backend do App Hosting.
          firebase apphosting:backends:deploy YOUR_APP_HOSTING_BACKEND_ID \
            --project ${{ secrets.NEXT_PUBLIC_PROJECT_ID }} \
            --region us-central1 # Ajuste a região se necessário
            --non-interactive
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_path }}

      - name: Deploy Firebase Functions
        run: |
          # O --prefix functions não é necessário aqui porque o firebase.json já define a source das functions.
          # A CLI do Firebase lerá o firebase.json no diretório raiz.
          firebase deploy --only functions \
            --project ${{ secrets.NEXT_PUBLIC_PROJECT_ID }} \
            --non-interactive
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_path }}

      - name: Deploy Firebase Rules (Firestore, Storage, RTDB)
        run: |
          # O checkout do código não é estritamente necessário aqui se os arquivos de regras
          # (firestore.rules, storage.rules, database.rules.json)
          # forem incluídos no 'nextjs-prod-build' artifact e extraídos para a raiz.
          # Se não estiverem, adicione um passo de 'actions/checkout@v4' aqui.
          # Para garantir, vamos adicioná-lo:
          actions/checkout@v4
          firebase deploy --only firestore:rules,storage:rules,database:rules \
            --project ${{ secrets.NEXT_PUBLIC_PROJECT_ID }} \
            --non-interactive
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_path }}

    # Segredos do GitHub Actions NECESSÁRIOS para este workflow (deploy_application):
    # 1. Para autenticação GCP (Workload Identity Federation):
    #    - GCP_PROJECT_NUMBER
    #    - GCP_WORKLOAD_IDENTITY_POOL_ID
    #    - GCP_WORKLOAD_IDENTITY_PROVIDER_ID
    #    - GCP_SERVICE_ACCOUNT_EMAIL
    # 2. Para o deploy do Firebase:
    #    - NEXT_PUBLIC_PROJECT_ID (usado como --project)
    # 3. IMPORTANTE: Substitua 'YOUR_APP_HOSTING_BACKEND_ID' no passo de deploy do App Hosting.
    # 4. Secrets de runtime das Firebase Functions (ex: GEMINI_API_KEY) devem ser configurados no GCP.
